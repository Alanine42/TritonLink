-- Create a function to check for overlapping time intervals
CREATE OR REPLACE FUNCTION check_meeting_overlap()
  RETURNS TRIGGER AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM meetings m
    WHERE section_id = NEW.section_id
      AND m.day = NEW.day
	  AND m.type <> NEW.type
      AND m.start_time < NEW.end_time
      AND m.end_time > NEW.start_time
  ) THEN
    RAISE EXCEPTION 'The meeting time overlaps with an existing meeting.';
  END IF;
  
   -- Meetings' time conflicts with any other meeting's time where the faculty_name of these two sections are the same
  IF EXISTS (
	select 1
	from classes c, classes c2, meetings m
	where new.section_id = c.section_id
	  and c.faculty_name = c2.faculty_name
	  and c2.section_id = m.section_id
	  and m.day = new.day
	  and m.start_time < new.end_time and m.end_time > new.start_time  
  )
    THEN
    RAISE EXCEPTION 'Meeting time conflicts with the professor s availability in other sections meetings';
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger to invoke the function before each insert
CREATE or Replace TRIGGER meeting_overlap_trigger
  BEFORE INSERT OR UPDATE ON meetings
  FOR EACH ROW
  EXECUTE FUNCTION check_meeting_overlap();
